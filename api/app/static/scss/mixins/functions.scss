@function is-inf($value) {
  @return type-of($value) == number and $value == 1/0;
}

@function clamp($number, $min, $max) {
  @return min(max($number, $min), $max);
}

@function approximateSq($num, $approx) {
    $root: (( $num / $approx ) + $approx) / 2;
    @return $root;
}
@function sqrt($num) {
    $root: 0;
    $testRoot: 0;
    $upperBounds: round($num / 2) + 1;
    //never need over half the main number. Add one just to be sure!
    $loops: $upperBounds;
    @for $test from 2 through $upperBounds {
        $sq: $test * $test;
        @if $sq <= $num {
            $testRoot: $test;
        }
    }
    $root: (approximateSq($num, $testRoot));
    @return $root;
}

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}